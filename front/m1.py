import streamlit as st
import time
from inference_sdk import InferenceHTTPClient
from PIL import Image, ImageDraw
import io

# Initialisation du client d'inf√©rence
CLIENT = InferenceHTTPClient(
    api_url="https://detect.roboflow.com",
    api_key="5Sv4RL4KtzgRCh1lWKJw"
)

def save_image(image, file_path):
    with open(file_path, 'wb') as f:
        f.write(image.getvalue())

# Fonction pour dessiner les bounding boxes sur l'image
def draw_boxes(image, predictions):
    draw = ImageDraw.Draw(image)
    
    for prediction in predictions:
        # Calcul des coordonn√©es de la bo√Æte
        x_center = prediction['x']
        y_center = prediction['y']
        width = prediction['width']
        height = prediction['height']
        
        # Coordonn√©es des coins  de la bo√Æte
        x_min = x_center - width / 2
        y_min = y_center - height / 2
        x_max = x_center + width / 2
        y_max = y_center + height / 2
        
        # Dessiner le rectangle (bounding box)
        draw.rectangle([x_min, y_min, x_max, y_max], outline="red", width=3)
        
        # Ajouter le texte de la classe d√©tect√©e avec la confiance
        label = f"{prediction['class']} ({prediction['confidence']:.2f})"
        draw.text((x_min, y_min - 10), label, fill="red")
    
    return image

# Configuration de la page
st.set_page_config(
    page_title="WLIN MI (Sauve moi)",
    page_icon="üêÑ",
    layout="wide"
)

# Sidebar pour la navigation
st.sidebar.title("Menu de navigation")
section = st.sidebar.radio("Aller √†", ["Accueil", "Exemples d'utilisation", "Uploader une image ou vid√©o", "√Ä propos"])

# Page d'accueil
if section == "Accueil":
    st.title("WLIN MI (Sauve moi)")
    st.markdown("## D√©tection intelligente de pathologies bovines üêÑ")
    with st.spinner('Chargement de la solution...'):
        time.sleep(2)  # Simule un temps de chargement
    st.success("Chargement termin√© !")
    
    st.markdown("""
    ### Bienvenue dans l'application WLIN MI (Sauve moi) üöú
    L'√©levage est un secteur crucial, et la sant√© de vos vaches est essentielle pour assurer une production de qualit√©. Avec **WLIN MI**, vous pouvez d√©sormais :
    - **Uploader** des images ou vid√©os de vos vaches malades.
    - **Obtenir instantan√©ment un diagnostic** des pathologies potentielles gr√¢ce √† un mod√®le de deep learning.
    - **Voir les zones touch√©es annot√©es** directement sur les images/vid√©os.

    **Objectif** : Am√©liorer la d√©tection pr√©coce des maladies et optimiser la gestion des troupeaux.

    Laissez-nous vous montrer comment cela fonctionne ! üßë‚Äçüåæ
    """)

    st.markdown("### D√©couvrez nos autres fonctionnalit√©s dans la barre lat√©rale √† gauche !")

# Section des exemples d'utilisation
elif section == "Exemples d'utilisation":
    st.header("Exemples d'utilisation")
    st.markdown("### Voici quelques exemples d'images de vaches avec des pathologies identifi√©es üêÑ")

    # Liste des images et descriptions
    images = [
        "https://www.lacompagniedesanimaux.com/media/amasty/blog/cache/A/v/800/410/Avril_2021_-_cetose_vache_laitiere.jpg",
        "https://www.difagri.fr/wp-content/uploads/2023/07/vaches-ferme-moderne-mangent-ensilage-table-alimentation-1200x800.jpg",
        "https://www.inrae.fr/sites/default/files/styles/actu/public/jpg/Vache%20montbelliarde%20laitiere.jpg?itok=YX6RXBoH"
    ]

    captions = [
        "C√©tose chez une vache laiti√®re : Cette maladie m√©tabolique survient souvent lors des p√©riodes de production de lait.",
        "Alimentation dans une ferme moderne : Les bonnes pratiques alimentaires aident √† pr√©venir plusieurs pathologies.",
        "Vache Montb√©liarde en pleine sant√© : Un bon √©tat g√©n√©ral est essentiel pour maximiser la production laiti√®re."
    ]

    # Utilisation d'une animation simple avec le s√©lecteur d'images
    index = st.slider("Choisissez une image √† voir", min_value=0, max_value=len(images)-1, step=1)
    st.image(images[index], caption=captions[index], use_column_width=True)

    # Simulation d'une analyse d'image
    st.markdown(f"**Analyse de l'image {index + 1}...**")
    with st.spinner('Analyse en cours...'):
        time.sleep(3)  # Simulation du processus d'analyse
    st.success(f"Analyse termin√©e pour l'image {index + 1} ! Pathologie d√©tect√©e : {captions[index].split(':')[0]}")

# Section pour uploader une image ou une vid√©o
elif section == "Uploader une image ou vid√©o":
    st.header("Uploader une image ou une vid√©o")
    st.markdown("""
    ### T√©l√©chargez une image ou vid√©o de votre vache malade et laissez notre mod√®le faire le diagnostic. üì∑
    """)

    # Upload du fichier (support pour images uniquement dans cet exemple)
    uploaded_file = st.file_uploader("Uploader une image ou vid√©o", type=["jpg", "jpeg", "png", "mp4"])

    if uploaded_file is not None:
        # V√©rification si le fichier upload√© est une image
        if uploaded_file.type.startswith("image/"):
            img = Image.open(uploaded_file)
            #st.image(img, caption="Image upload√©e", use_column_width=True)
            st.markdown("Analyse en cours...")

            # Conversion de l'image en bytes pour l'API
            img_bytes = io.BytesIO()
            img.save(img_bytes, format="JPEG")
            img_bytes.seek(0)

            save_path = 'temp_image.jpg'

            # Sauvegarder l'image en local
            save_image(img_bytes, save_path)
            
            with st.spinner('Analyse de votre fichier...'):
                # Envoi de l'image au mod√®le d'inf√©rence via l'API
                result = CLIENT.infer(save_path, model_id="cattle-diseases-ezkwx/1")
                time.sleep(3)  # Temps simul√© pour l'inf√©rence
            
            img_with_boxes = draw_boxes(img, result['predictions'])
            st.image(img_with_boxes, caption="Detection", use_column_width=True)
            st.success("Pathologie d√©tect√©e : " + str(result))
            

        else:
            st.error("Le format vid√©o n'est pas encore support√©. Veuillez uploader une image.")

# Section "√Ä propos"
elif section == "√Ä propos":
    st.header("√Ä propos de WLIN MI (Sauve moi)")
    st.markdown("""
    ### L'application WLIN MI (Sauve moi) est une solution intelligente de d√©tection de pathologies bovines bas√©e sur l'intelligence artificielle.
    
    Elle a √©t√© con√ßue pour aider les √©leveurs √† mieux g√©rer la sant√© de leurs troupeaux et √† d√©tecter rapidement les maladies avant qu'elles ne deviennent critiques. 

    **Principales fonctionnalit√©s** :
    - D√©tection automatique des pathologies √† partir d'images et de vid√©os.
    - Annotations automatiques des parties affect√©es.
    - Interface intuitive et facile √† utiliser.

    **Technologies utilis√©es** :
    - Mod√®les de deep learning avanc√©s pour la d√©tection d'images (bas√©s sur YOLOv8).
    - Interface interactive d√©velopp√©e avec Streamlit.
    
    D√©velopp√© par une √©quipe passionn√©e d'experts en IA et en √©levage. üåç
    """)

# Footer
st.sidebar.markdown("---")
st.sidebar.info("**¬© 2024 WLIN MI | Tous droits r√©serv√©s**")
